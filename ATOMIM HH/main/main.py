import customtkinter as ctk
from g4f.client import Client
import pyttsx3
import speech_recognition as sr
import tkinter as tk

r=sr.Recognizer()
mic=sr.Microphone()

sr.LANGAUGE="ru-RU"

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ G4F
client = Client()
engine=pyttsx3.init('sapi5')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

app = ctk.CTk()
app.title("–ì–æ–ª–æ—Å–æ–≤–æ–π –ü–æ–º–æ—â–Ω–∏–∫")
app.geometry("900x500")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
label_title = ctk.CTkLabel(app, text="ùìêùì£ùìûùìúùìòùìú ùìó", font=('Arial', 35))
label_title.pack(pady=10)

#–í–≤–µ—Å—Ç–∏
label = ctk.CTkLabel(app, text="–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ –∏ –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç", font=("Arial", 14))
label.pack(pady=5)

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
entry = ctk.CTkEntry(app, placeholder_text="–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...")
entry.pack(pady=10)

# –ú–µ—Å—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
output_label = ctk.CTkLabel(app, text="", font=("Arial", 13), wraplength=800, justify="left")
output_label.pack(pady=10)

def resize(event):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
    width, height = event.width, event.height

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è
    label_title.config(font=("Orbitron", int(height * 0.08)))

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    label.config(font=("Arial", int(height * 0.06)))

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–∫–∏
    button.config(width=int(width * 0.4), height=int(height * 0.1))

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ–ª—è –≤–≤–æ–¥–∞
    entry.config(width=int(width * 0.6))

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
    text_display.config(width=int(width * 0.6), height=int(height * 0.2))


#—Å–º–µ–Ω–∞ —Ç–µ–º—ã
def switch_theme():
    current_mode = ctk.get_appearance_mode()
    new_mode = "light" if current_mode == "Dark" else "dark"
    ctk.set_appearance_mode(new_mode)
    
    theme_button.configure(text=f"–¢–µ–º–∞: {new_mode.capitalize()}")

    if new_mode == "light":
        label_title.configure(text_color="gray")
        label.configure(text_color="gray")
        entry.configure(text_color="black")
    else:
        label_title.configure(text_color="lightgray")
        label.configure(text_color="white")
        entry.configure(text_color="lightgray")
    
    if current_mode=='light':
        label_title.configure(text_color="gray")
        label.configure(text_color="gray")
        entry.configure(text_color="black")

theme_button = ctk.CTkButton(app, text="–¢–µ–º–∞: Dark", command=switch_theme)
theme_button.pack(pady=10)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
with mic as source:
    r.adjust_for_ambient_noise(source)
    def listen_and_process():
        with mic as source:
            r.adjust_for_ambient_noise(source)
            print("–°–ª—É—à–∞—é...")
            audio = r.listen(source)
            try:
                text = r.recognize_google(audio, language='ru-RU')
                entry.delete(0, 'end')  # Clear entry field
                entry.insert(0, text)   # Show recognized text
                handle_input()          # Process the input
            except sr.UnknownValueError:
                output_label.configure(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —á—Ç–æ –≤—ã —Å–∫–∞–∑–∞–ª–∏")
            except sr.RequestError:
                output_label.configure(text="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
 
    # Add a voice input button
    voice_button = ctk.CTkButton(app, text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥", command=listen_and_process)
    voice_button.pack(pady=10)

def handle_input(event=None):
    text = entry.get()
    if text.strip() == "":
        output_label.configure(text="‚ö†Ô∏è –¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤—ë–ª!")
        # Early return for empty input 
        return
    
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ "gpt-3.5-turbo"
            messages=[{"role": "user", "content": text}],
            web_search=False
        )
        answer = response.choices[0].message.content
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞: {e}"

    engine=pyttsx3.init('sapi5')

    output_label.configure(text=answer)

# Enter = –∑–∞–ø—É—Å–∫
entry.bind("<Return>", handle_input)

# –ö–Ω–æ–ø–∫–∞
button = ctk.CTkButton(app, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=handle_input)
button.pack(pady=10)


app.mainloop()

input("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É...")
